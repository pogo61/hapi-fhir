
package ${packageBase};

import java.util.*;

import org.apache.commons.lang3.StringUtils;

import ca.uhn.fhir.jpa.provider.JpaResourceProvider${versionCapitalized};
import ca.uhn.fhir.jpa.dao.SearchParameterMap;
import ca.uhn.fhir.model.api.IResource;
import ca.uhn.fhir.model.api.Include;
import ca.uhn.fhir.model.api.annotation.*;
import ca.uhn.fhir.model.${version}.composite.*;
import ca.uhn.fhir.model.${version}.resource.*;
import ca.uhn.fhir.rest.annotation.*;
import ca.uhn.fhir.rest.param.*;
import ca.uhn.fhir.rest.api.SortSpec;
import ca.uhn.fhir.model.dstu.resource.Binary;
// import ca.uhn.fhir.model.dstu2.resource.Bundle;
// import ca.uhn.fhir.model.api.Bundle;

public class ${className}ResourceProvider extends JpaResourceProvider${versionCapitalized}<${className}> {

	@Override
	public Class<? extends IResource> getResourceType() {
		return ${className}.class;
	}

	@Search()
	public ca.uhn.fhir.rest.server.IBundleProvider search(
			javax.servlet.http.HttpServletRequest theServletRequest,
	
			@Description(shortDefinition="The resource identity")
			@OptionalParam(name="_id")
			StringParam theId, 

			@Description(shortDefinition="The resource language")
			@OptionalParam(name="_language")
			StringParam theResourceLanguage, 
#foreach ( $param in $searchParams ) #{if}(true) #{end} 

			@Description(shortDefinition="${param.description}")
#if (${param.type} == 'string' )
			@OptionalParam(name="${param.name}")
			StringAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'token' )
			@OptionalParam(name="${param.name}")
			TokenAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'date' )
			@OptionalParam(name="${param.name}")
			DateRangeParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'uri' )
			@OptionalParam(name="${param.name}")
			UriAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'quantity' )
			@OptionalParam(name="${param.name}")
			QuantityAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'number' )
			@OptionalParam(name="${param.name}")
			NumberAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'reference' )
			@OptionalParam(name="${param.name}", targetTypes={ #{foreach}($nextType in ${param.targetTypes}) ${nextType}.class #{if}($foreach.hasNext), #{end} #{end} } )
			ReferenceAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'composite' )
			@OptionalParam(name="${param.name}", compositeTypes= { ${param.compositeTypes[0]}Param.class, ${param.compositeTypes[1]}Param.class })
			CompositeAndListParam<${param.compositeTypes[0]}Param, ${param.compositeTypes[1]}Param> the${param.nameCapitalized},
#end
#end	

#if ( $version != 'dstu' )
			@IncludeParam(reverse=true)
			Set<Include> theRevIncludes,
#end

			@IncludeParam(allow= {
#foreach ( $param in $searchParamsReference )
#set ( $haveMore = $foreach.hasNext )
#if ( $version == 'dstu' )
	#foreach ( $include in $param.paths )
				"${include.path}" #{if}($foreach.hasNext || $haveMore), #{end}
	#end
#else
	#foreach ( $include in $includes )
				"${include.path}" #{if}($foreach.hasNext || $haveMore), #{end}
	#end
#end				 
#end
				#{if}($searchParamsReference.empty == false), #{end}"*"
			}) 
			Set<Include> theIncludes,
			
			@Sort 
			SortSpec theSort,
			
			@Count
			Integer theCount
	) {
		startRequest(theServletRequest);
		try {
			SearchParameterMap paramMap = new SearchParameterMap();
			paramMap.add("_id", theId);		
			paramMap.add("_language", theResourceLanguage);			
#foreach ( $param in $searchParams ) 
			paramMap.add("${param.name}", the${param.nameCapitalized});	
#end
#if ( $version != 'dstu' )
			paramMap.setRevIncludes(theRevIncludes);
#end
			paramMap.setIncludes(theIncludes);
			paramMap.setSort(theSort);
			paramMap.setCount(theCount);

			ca.uhn.fhir.rest.server.IBundleProvider retVal = getDao().search(paramMap);
			return retVal;
		} finally {
			endRequest(theServletRequest);
		}
	}



#if ( $version != 'dstu' && (${className} == 'Patient' || ${className} == 'Encounter') )
	@Operation(name="everything", idempotent=true)
	public ca.uhn.fhir.rest.server.IBundleProvider everything(
			javax.servlet.http.HttpServletRequest theServletRequest, 
			@IdParam ca.uhn.fhir.model.primitive.IdDt theId, 
			
			@Description(formalDefinition="Results from this method are returned across multiple pages. This parameter controls the size of those pages.")
			@OperationParam(name="_count") ca.uhn.fhir.model.primitive.UnsignedIntDt theCount
	){

		startRequest(theServletRequest);
		try {
			SearchParameterMap paramMap = new SearchParameterMap();
			if (theCount != null) {
				paramMap.setCount(theCount.getValue());
			}

			paramMap.setRevIncludes(Collections.singleton(new Include("*")));
			paramMap.setIncludes(Collections.singleton(new Include("*")));
			paramMap.add("_id", new StringParam(theId.getIdPart()));		
			ca.uhn.fhir.rest.server.IBundleProvider retVal = getDao().search(paramMap);
			return retVal;
		} finally {
			endRequest(theServletRequest);
		}

	}
#end

}
